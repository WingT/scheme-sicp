(define l (list 1 2 3 4 5 6 7))
(define (list-ref l n)
  (if (= n 0)
      (car l)
      (list-ref (cdr l) (- n 1))))
(define (length l)
  (define (length-iter tmpl count)
    (if (null? tmpl)
        count
        (length-iter (cdr tmpl) (+ count 1))))
  (length-iter l 0))
(define (append a b)
  (if (null? a)
      b
      (cons (car a) (append (cdr a) (cons (car a) b)))))
(list-ref l 4)
(length l)
(define sq (list 1 4 9 16 25))
(define odds (list 1 3 5 7))
(append sq odds)
(define (last-pair l)
  (if (null? (cdr l))
      (list (car l))
      (last-pair (cdr l))))
(last-pair odds)
