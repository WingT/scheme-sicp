(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence) (accumulate op initial (cdr sequence)))))
(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((equal? x (car set)) #t)
        (else (element-of-set? x (cdr set)))))
(define (adjoin-set x set)
  (if (element-of-set? x set)
      set
      (cons x set)))
(define (intersaction-set set1 set2)
  (accumulate (lambda (x y)
                (if (element-of-set? x set2)
                    (cons x y)
                    y)) '() set1))
(define (union-set set1 set2)
  (accumulate (lambda (x y)
                (if (element-of-set? x set2)
                    y
                    (cons x y))) set2 set1))
