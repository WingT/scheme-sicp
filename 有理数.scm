(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
(define (make-rat n d)
  (let ((g (gcd (abs n) (abs d))))
    (define nn
      (if (< d 0)
          (- n)
          n))
    (define nd (abs d))
    (cons (/ nn g)
          (/ nd g))))
(define numer car)
(define denom cdr)
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (numer y) (denom x))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y)) (* (numer y) (denom x))))
(define (print-rat x)
  (display "\n")
  (display (numer x))
  (display "/")
  (display (denom x))
  (display "\n"))
(print-rat (sub-rat (make-rat 1 3) (make-rat 1 2)))
