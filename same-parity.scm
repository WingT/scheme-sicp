(define g
  (lambda w
    (define (add-iter  tmp ans)
      (if (null? tmp)
          ans
          (add-iter (cdr tmp) (+ (car tmp) ans))))
    (add-iter w 0)))
(define (g1 . w)
  (define (add-iter  tmp ans)
    (if (null? tmp)
        ans
        (add-iter (cdr tmp) (+ (car tmp) ans))))
  (add-iter w 0))
(define f
  (lambda (x y . z)
    (define (add-iter  tmp ans)
      (if (null? tmp)
          ans
          (add-iter (cdr tmp) (+ (car tmp) ans))))
    (+ x y (add-iter z 0))))
(define (f1 x y . z)
  (define (add-iter  tmp ans)
    (if (null? tmp)
        ans
        (add-iter (cdr tmp) (+ (car tmp) ans))))
  (+ x y (add-iter z 0)))
(g 1 2 3 4 5)
(g1 1 2 3 4 5)
(f 1 2 3 4 5)
(f1 1 2 3 4 5)
(define (same-parity . w)
  (define (same-parity-rec tmp)
      (define (next-list l)
        (if (or (null? (cdr l))
                (= (remainder (cadr l) 2)
                   (remainder (car tmp) 2)))
            (cdr l)
            (next-list (cdr l))))
      (if (null? tmp)
          (list)
          (cons (car tmp) (same-parity-rec (next-list tmp)))))
  (same-parity-rec w))
(same-parity 1 2 3 4 5 6 7)
(same-parity 2 3 4 5 6 7)
(restart 1)
