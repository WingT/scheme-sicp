(define (memq item x)
  (cond ((null? x) #f)
        ((eq? item (car x)) x)
        (else (memq item (cdr x)))))
;2.54
(define (my-equal? a b)
  (cond ((and (not (pair? a)) (not (pair? b)))
         (eq? a b))
        ((and (pair? a) (pair? b))
         (and (my-equal? (car a) (car b))
              (my-equal? (cdr a) (cdr b))))
        (else #f)))
;符号求导
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum
          (deriv (addend exp) var)
          (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product
           (multiplier exp)
           (deriv (multiplicand exp) var))
          (make-product
           (multiplicand exp)
           (deriv (multiplier exp) var))))
        ((exponentiation? exp)
         (make-product
          (exponent exp)
          (make-product
           (make-exponentiation
            (base exp)
            (- (exponent exp) 1))
           (deriv (base exp) var))))
        (else (error "unknown expression type -- DERIV" exp))))
(define (variable? exp)
  (symbol? exp))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (sum? exp)
  (and (pair? exp) (eq? (car exp) '+)))
(define (make-sum exp1 exp2)
  (cond ((=number? exp1 0) exp2)
        ((=number? exp2 0) exp1)
        ((and (number? exp1) (number? exp2)) (+ exp1 exp2))
        (else (list '+ exp1 exp2))))
(define (addend exp)
  (cadr exp))
(define (augend exp)
  (if (null? (cdddr exp))
      (caddr exp)
      (cons '+ (cddr exp))))
(define (product? exp)
  (and (pair? exp) (eq? (car exp) '*)))
(define (=number? exp num)
  (and (number? exp) (= exp num)))
(define (make-product exp1 exp2)
  (cond  ((or (=number? exp1 0) (=number? exp2 0)) 0)
         ((=number? exp1 1) exp2)
         ((=number? exp2 1) exp1)
         ((and (number? exp1) (number? exp2)) (* exp1 exp2))
         (else (list '* exp1 exp2))))
(define (multiplier exp)
  (cadr exp))
(define (multiplicand exp)
  (if (null? (cdddr exp))
      (caddr exp)
      (cons '* (cddr exp))))
;2.56
(define (exponentiation? exp)
  (and (pair? exp) (eq? (car exp) '^)))
(define (base exp)
  (cadr exp))
(define (exponent exp)
  (caddr exp))
(define (make-exponentiation base exp)
  (cond ((=number? base 0) 0)
        ((=number? base 1) 1)
        ((=number? exp 0) 1)
        ((=number? exp 1) base)
        (else (list '^ base exp))))
