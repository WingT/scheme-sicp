(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) 0.00001))
  (define (try guess)
    (define next (f guess))
     (if (close-enough? guess next)
         guess
         (try next)))
  (try first-guess))
(define (D f)
  (define dx 0.0001)
  (lambda (x) (/ (- (f (+ x dx)) (f x)) dx)))
(define (newton-transform f)
  (lambda (x) (- x (/ (f x) ((D f) x)))))
(define (newton-method f guess)
  (fixed-point (newton-transform f) 1.0))
(define (cubic a b c)
  (lambda (x) (+ (* x x x) (* a x x) (* b x) c)))
(newton-method (cubic -6 12 -8) 1.0)
