(define (install-rectangular-package)
;;internal procedures
  (define (real-part z) (car z))
  (define (imag-part z) (cdr z))
  (define (make-from-real-imag x y) (cons x y))
  (define (magnitude z)
    (sqrt (+ (square (real-part z))
             (square (imag-part z)))))
  (define (angle z)
    (atan (imag-part z) (real-part z)))
  (define (make-from-mag-ang r a)
    (cons (* r (cos a)) (* r (sin a))))
;;interface to the rest of the system
  (define (tag x) (attach-tag 'rectangular x))
  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle '(rectangular) angle)
  (put 'make-from-real-imag 'rectangular
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'rectangular
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)
(define (install-polar-package)
;;internal procedures
  (define (real-part z)
    (* (magnitude z) (cos (angle z))))
  (define (imag-part z)
    (* (magnitude z) (sin (angle z))))
  (define (make-from-real-imag x y)
    (cons (sqrt (+ (square x) (square y)))
          (atan y x)))
  (define (magnitude z) (car z))
  (define (angle z) (cdr z))
  (define (make-from-mag-ang r a)
    (cons r a))
;;interface to the rest of the system
  (define (tag x) (attach-tag 'polar x))
  (put 'real-part '(polar) real-part)
  (put 'imag-part '(polar) imag-part)
  (put 'magnitude '(polar) magnitude)
  (put 'angle '(polar) angle)
  (put 'make-from-real-imag 'polar
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'polar
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)
(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part z))
(define (magnitude z) (apply-generic 'magnitude z))
(define (angle z) (apply-generic 'angle z))
(define (make-from-mag-ang r a)
  ((get 'make-from-mag-ang 'polar) r a))
(define (make-from-real-imag x y)
  ((get 'make-from-real-imag 'rectangular) x y))
;;test
(install-polar-package)
(install-rectangular-package)
(define x (make-from-mag-ang 1 3.1415926535))
(real-part x)
(imag-part x)
(magnitude x)
(angle x)
(define y (make-from-real-imag 1 1))
(real-part y)
(imag-part y)
(magnitude y)
(angle y)
;2.73
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        (else ((get 'deriv (operator exp)) (operands exp) var))))
(define (variable? exp)
  (symbol? exp))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))
;b
(define (make-sum exp1 exp2)
  (cond ((=number? exp1 0) exp2)
        ((=number? exp2 0) exp1)
        ((and (number? exp1) (number? exp2)) (+ exp1 exp2))
        (else (list '+ exp1 exp2))))
;need some change
(define (addend operands)
  (car operands))
(define (augend operands)
  (if (null? (cddr operands))
      (cadr operands)
      (cons '+ (cdr operands))))
(define (=number? exp num)
  (and (number? exp) (= exp num)))
(define (make-product exp1 exp2)
  (cond  ((or (=number? exp1 0) (=number? exp2 0)) 0)
         ((=number? exp1 1) exp2)
         ((=number? exp2 1) exp1)
         ((and (number? exp1) (number? exp2)) (* exp1 exp2))
         (else (list '* exp1 exp2))))
(define (multiplier operands)
  (car operands))
(define (multiplicand operands)
  (if (null? (cddr operands))
      (cadr operands)
      (cons '* (cdr operands))))
(define (install-deriv-sum)
  (define (result operands var)
    (make-sum
     (deriv (addend operands) var)
     (deriv (augend operands) var)))
  (put 'deriv '+ result)
  'done)
(install-deriv-sum)
(define (install-deriv-product)
  (define (result operands var)
    (make-sum
     (make-product
      (multiplier operands)
      (deriv (multiplicand operands) var))
     (make-product
      (multiplicand operands)
      (deriv (multiplier operands) var))))
  (put 'deriv '* result)
  'done)
(install-deriv-product)
(deriv '(+ x y) 'x)
(deriv '(* x y) 'x)
;c
(define (install-deriv-exponentiation)
  (define (make-exponentiation u n)
    (list '** u n))
  (define (result operands var)
    (let ((u (car operands))
          (n (cadr operands)))
      (make-product
       n
       (make-product
        (make-exponentiation u (- n 1))
        (deriv u var)))))
  (put 'deriv '** result)
  'done)
(install-deriv-exponentiation)
(deriv '(** x 9) 'x)
