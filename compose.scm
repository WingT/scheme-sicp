(define (compose f g)
  (lambda (x) (f (g x))))
(define (squar x) (* x x))
(define (inc x) (+ x 1))
(define (repeated f n)
  (define (repeated-iter k g)
    (if (= k n)
        g
        (repeated-iter (+ k 1) (lambda (x) (f (g x))))))
  (repeated-iter 1 f))
((repeated square 2) 5)
(define (smooth f)
  (define dx 0.00005)
  (lambda (x) (/ (+ (f x) (f (- x dx)) (f (+ x dx))) 3.0)))
(define (smooth-n f n)
  (define (smooth-n-iter k g)
    (if (= k n)
        g
        (smooth-n-iter (+ 1 k) (smooth g))))
  (smooth-n-iter 0 f))
