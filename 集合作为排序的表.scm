(define (element-of-set? x set)
  (cond ((or (null? set) (> (car set) x)) #f)
        ((= x (car set)) #t)
        (else (element-of-set? x (cdr set)))))
(define (intersaction-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((= (car set1) (car set2))
         (cons (car set1) (intersaction-set (cdr set1) (cdr set2))))
        ((< (car set1) (car set2))
         (intersaction-set (cdr set1) set2))
        (else (intersaction-set set1 (cdr set2)))))
(define (adjoin-set x set)
  (cond ((or (null? set) (> (car set) x)) (cons x set))
        ((= (car set) x) set)
        (else (cons (car set) (adjoin-set x (cdr set))))))
(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        (else
         (let ((x1 (car set1))
               (x2 (car set2)))
           (cond ((= x1 x2) (cons x1 (union-set (cdr set1) (cdr set2))))
                 ((< x1 x2) (cons x1 (union-set (cdr set1) set2)))
                 (else (cons x2 (union-set set1 (cdr set2)))))))))
(union-set '(2 5 7) '(1 2 7 9))
