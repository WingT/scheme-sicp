(define (negative? x)
  (< x 0))
(define (positive? x)
  (> x 0))
(define (half-interval-method f a b)
  (let ((a-value (f a))
        (b-value (f b)))
    (cond ((and (negative? a-value) (positive? b-value))
           (search f a b))
          ((and (positive? a-value) (negative? b-value))
           (search f b a))
          (else (error "values are not of opposite sign" a b)))))
(define (search f neg-point pos-point)
  (let ((midpoint (/ (+ neg-point pos-point) 2)))
    (cond ((< (abs (- neg-point pos-point)) 0.000001)
           midpoint)
          ((negative? (f midpoint))
           (search f midpoint pos-point))
          ((positive? (f midpoint))
           (search f neg-point midpoint))
          (else midpoint))))
(half-interval-method sin 2.0 4.0)
