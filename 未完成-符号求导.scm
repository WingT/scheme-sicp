(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum
          (deriv (addend exp) var)
          (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product
           (multiplier exp)
           (deriv (multiplicand exp) var))
          (make-product
           (multiplicand exp)
           (deriv (multiplier exp) var))))
        (else (error "unknown expression type -- DERIV" exp))))
(define (variable? exp)
  (symbol? exp))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (sum? exp)
  (and (pair? exp) (eq? (car exp) '+)))
(define (make-sum exp1 exp2)
  (cond ((=number? exp1 0) exp2)
        ((=number? exp2 0) exp1)
        ((and (number? exp1) (number? exp2)) (+ exp1 exp2))
        (else (list '+ exp1 exp2))))
(define (addend exp)
  (cadr exp))
(define (augend exp)
  (if (null? (cdddr exp))
      (caddr exp)
      (cons '+ (cddr exp))))
(define (product? exp)
  (and (pair? exp) (eq? (car exp) '*)))
(define (=number? exp num)
  (and (number? exp) (= exp num)))
(define (make-product exp1 exp2)
  (cond  ((or (=number? exp1 0) (=number? exp2 0)) 0)
         ((=number? exp1 1) exp2)
         ((=number? exp2 1) exp1)
         ((and (number? exp1) (number? exp2)) (* exp1 exp2))
         (else (list '* exp1 exp2))))
(define (multiplier exp)
  (cadr exp))
(define (multiplicand exp)
  (if (null? (cdddr exp))
      (caddr exp)
      (cons '* (cddr exp))))
(define (separate exp)
  (define (car+ tmp)
    (cond
     ((or (null? tmp) (eq? (car tmp) '+))'())
     (else (cons (car tmp) (car+ (cdr tmp))))))
  (define (cdr+ tmp)
    (cond ((null? tmp) '())
          ((eq? (car tmp) '+) (cdr tmp))
          (else (cdr+ (cdr tmp)))))
  (if (null? exp)
      '()
      (let ((next (separate (cdr+ exp))))
        (if (null? next)
            exp
            (cons (car+ exp) next)))))
(separate '(2 * y))
(separate '(x + 3 * (x + y + z) + 2 * y))
(define (standardize exp)
  (map (lambda (x)
         (if (pair? x)
             (if (null? (cdr x))
                 (car x)
                 x)
             x))
       (separate exp)))
(standardize '(x + 3 * (x + y + z) + 2 * y))
(standardize '((x) + (3 * (x + y + z)) + (2 * y)))
