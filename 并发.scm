;串行化的实现
(define (make-serializer)
  (let ((mutex (make-mutex)))
    (lambda (p)
      (lambda args
        (mutex 'acquire)
        (let ((val (apply p args)))
          (mutex 'release)
          val)))))
(define (make-mutex)
  (let ((cell (list false)))
    (define (clear! cell)
      (set-car! cell false))
    (define (test-and-set! cell)
      (if (car cell)
          true
          (begin (set-car! cell true)
                 false)))
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-mutex 'acquire)))
            ((eq? m 'release)
             (clear! cell))))
    the-mutex))
;3.47
(define (make-serializer-2 max)
  (let ((semaphore (make-semaphore max)))
    (lambda (p)
      (lambda args
        (semaphore 'acquire)
        (let ((val (apply p args)))
          (semaphore 'release)
          val)))))
(define (make-semaphore max)
  (let ((mutex (make-mutex))
        (p-count 0))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
             (if (= p-count max)
                 (mutex 'acquire)
                 (begin
                   (set! p-count (+ 1 p-count))
                   (if (= p-count max)
                       (mutex 'acquire)))))
            ((eq? m 'release)
             (set! p-count (- p-count 1))
             (mutex 'release))))
    the-semaphore))
