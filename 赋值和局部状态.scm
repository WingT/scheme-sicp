(define (make-account balance)
  (define (withdraw account)
    (if (>= balance account)
        (begin (set! balance (- balance account))
               balance)
        "insufficient funds"))
  (define (deposit account)
    (set! balance (+ balance account))
    balance)
  (lambda (m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit))))
;3.1
(define (make-accumulator init)
  (lambda (operand)
    (set! init (+ init operand))
    init))
;3.2
(define (make-monitored f)
  (define count 0)
  (lambda (arg)
    (cond ((eq? arg 'how-many-calls) count)
          ((eq? arg 'reset-count)
           (set! count 0)
           count)
          (else
           (set! count (+ count 1))
           (f arg)))))
;3.3
(define (make-secret-account balance password)
  (define (withdraw account)
    (if (>= balance account)
        (begin (set! balance (- balance account))
               balance)
        "insufficient funds"))
  (define (deposit account)
    (set! balance (+ balance account))
    balance)
  (lambda (n m)
    (cond ((not (eq? n password))
           (lambda (x) "wrong password"))
          ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit))))
;3.4
(define (make-secret-account-1 balance password)
  (define (withdraw account)
    (if (>= balance account)
        (begin (set! balance (- balance account))
               balance)
        "insufficient funds"))
  (define (deposit account)
    (set! balance (+ balance account))
    balance)
  (define (call-the-cops)
    (display "you will be arrested"))
  (define wrong-counts 0)
  (lambda (n m)
    (cond ((not (eq? n password))
           (set! wrong-counts (+ 1 wrong-counts))
           (if (> wrong-counts 7)
               (lambda (x)
                 (call-the-cops)
                 "we have called the cops")
               (lambda (x) "wrong password")))
          (else (set! wrong-counts 0)
                (cond ((eq? m 'withdraw) withdraw)
                      ((eq? m 'deposit) deposit))))))
