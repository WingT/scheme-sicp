(define (iterative-improve good-enough?  improve)
  (lambda (x) (define (iter guess)
                (if (good-enough? guess)
                    guess
                    (iter (improve guess))))
          (iter x)))
(define (squareroot x)
  (define (improve y)
    (/ (+ y (/ x y)) 2.0))
  (define (good-enough? guess)
    (< (abs (- guess (improve guess))) 0.00001))
  ((iterative-improve good-enough? improve) 1.0))
(squareroot 2)
(define (fixed-point f)
  (define (good-enough? x)
    (< (abs (- x (f x))) 0.00001))
  ((iterative-improve good-enough? f) 1.0))
(fixed-point (lambda (x) (+ 1 (/ 1 x))))
