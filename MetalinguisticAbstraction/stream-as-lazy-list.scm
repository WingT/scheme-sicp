;Warning! don't try to evalute one stream object!
(define apply-in-underlying-scheme apply)
(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ;4.2.3
        ((cons? exp) (cons (delay-it (cadr exp) env)
                           (delay-it (caddr exp) env)))
        ((car? exp) (force-it (car (actual-value (cadr exp) env))))
        ((cdr? exp) (force-it (cdr (actual-value (cadr exp) env))))
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env))
        ((begin? exp)
         (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
;4.6
        ((let? exp) (eval (let->combination exp) env))
        ((let*? exp) (eval (let*->nested-lets exp) env))
        ;4.20
        ((letrec? exp) (eval (letrec->combination exp) env))
        ((application? exp)
         (apply (actual-value (operator exp) env)
                (operands exp)
                env))
        (else
         (error "Unknown expression type -- EVAL" exp))))
(define (cons? exp)
  (if (tagged-list? exp 'cons)
      (if (= (length exp) 3)
          true
          (error "Unknown expression type -- EVAL" exp))
      false))
(define (car? exp)
  (if (tagged-list? exp 'car)
      (if (= (length exp) 2)
          true
          (error "Unknown expression type -- EVAL" exp))
      false))
(define (cdr? exp)
  (if (tagged-list? exp 'cdr)
      (if (= (length exp) 2)
          true
          (error "Unknown expression type -- EVAL" exp))
      false))

(define (actual-value exp env)
  (force-it (eval exp env)))
(define (apply procedure arguments env)
  (cond ((primitive-procedure? procedure)
         (apply-primitive-procedure
          procedure
          (list-of-arg-values arguments env)))
        ((compound-procedure? procedure)
         (eval-sequence
          (procedure-body procedure)
          (extend-environment
           (procedure-parameters procedure)
           (list-of-delayed-values arguments env)
           (procedure-environment procedure))))
        (else
         (error
          "Unknown procedure type -- APPLY" procedure))))
(define (list-of-arg-values exps env)
  (if (no-operands? exps)
      '()
      (cons (actual-value (first-operand exps) env)
            (list-of-arg-values (cdr exps) env))))
(define (list-of-delayed-values exps env)
  (if (no-operands? exps)
      '()
      (cons (delay-it (first-operand exps) env)
            (list-of-delayed-values (cdr exps) env))))
(define (force-it obj)
  (cond ((thunk? obj)
         (let ((result (actual-value
                        (thunk-exp obj)
                        (thunk-env obj))))
           (set-car! obj 'evaluated-thunk)
           (set-car! (cdr obj) result)
           (set-cdr! (cdr obj) '())
           result))
        ((evaluated-thunk? obj)
         (thunk-value obj))
        (else obj)))
(define (delay-it exp env)
  (list 'thunk exp env))
(define (thunk? obj)
  (tagged-list? obj 'thunk))
(define (thunk-exp thunk)
  (cadr thunk))
(define (thunk-env thunk)
  (caddr thunk))
(define (evaluated-thunk? obj)
  (tagged-list? obj 'evaluated-thunk))
(define (thunk-value evaluated-thunk)
  (cadr evaluated-thunk))
(define (eval-if exp env)
  (if (true? (actual-value (if-predicate exp) env))
      (eval (if-consequent exp) env)
      (eval (if-alternative exp) env)))
;sequences
(define (eval-sequence exps env)
  (cond ((last-exp? exps) (eval (first-exp exps) env))
        (else (eval (first-exp exps) env)
              (eval-sequence (rest-exps exps) env))))
;assignments and definitions
(define (eval-assignment exp env)
  (set-variable-value! (assignment-variable exp)
                       (eval (assignment-value exp) env)
                       env)
  'ok)
(define (eval-definition exp env)
  (define-variable! (definition-variable exp)
    (eval (definition-value exp) env)
    env)
  'ok)
;4.1.2
(define (self-evaluating? exp)
  (or (number? exp) (string? exp)))
(define (variable? exp) (symbol? exp))
(define (quoted? exp)
  (tagged-list? exp 'quote))
(define (text-of-quotation exp) (cadr exp))
(define (tagged-list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
      false))
(define (assignment? exp)
  (tagged-list? exp 'set!))
(define (assignment-variable exp) (cadr exp))
(define (assignment-value exp) (caddr exp))
(define (definition? exp)
  (tagged-list? exp 'define))
(define (definition-variable exp)
  (if (symbol? (cadr exp))
      (cadr exp)
      (caadr exp)))
(define (definition-value exp)
  (if (symbol? (cadr exp))
      (caddr exp)
      (make-lambda (cdadr exp)
                   (cddr exp))))
(define (lambda? exp)
  (tagged-list? exp 'lambda))
(define (lambda-parameters exp)
  (cadr exp))
(define (lambda-body exp)
  (cddr exp))
(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))
(define (if? exp) (tagged-list? exp 'if))
(define (if-predicate exp) (cadr exp))
(define (if-consequent exp) (caddr exp))
(define (if-alternative exp)
  (if (null? (cdddr exp))
      'false
      (cadddr exp)))
;bug?
(define (make-if predicate consequent alternative)
  (list 'if predicate consequent alternative))
(define (begin? exp) (tagged-list? exp 'begin))
(define (begin-actions exp) (cdr exp))
(define (last-exp? seq) (null? (cdr seq)))
(define (first-exp seq) (car seq))
(define (rest-exps seq) (cdr seq))
(define (rest-seq seq) (cdr seq))
(define (sequence->exp seq)
  (cond ((null? seq) seq)
        ((last-exp? seq) (first-exp seq))
        (else (make-begin seq))))
(define (make-begin seq) (cons 'begin seq))
;procedure application
(define (application? exp) (pair? exp))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))
(define (no-operands? ops) (null? ops))
(define (first-operand ops) (car ops))
(define (rest-operands ops) (cdr ops))
;derived expressions
(define (cond? exp) (tagged-list? exp 'cond))
(define (cond-clauses exp) (cdr exp))
(define (cond-else-clause? clause)
  (eq? (cond-predicate clause) 'else))
(define (cond-predicate clause) (car clause))
(define (cond-actions clause) (cdr clause))
(define (cond->if exp)
  (expand-clauses (cond-clauses exp)))
(define (no-exps? exps) (null? exps))
;derived form
(define (and->if exp)
  (expand-and-clauses (cdr exp)))
(define (expand-and-clauses clauses)
  (if (null? clauses)
      'true
      (make-if (car clauses)
               (expand-and-clauses (cdr clauses))
               'false)))
(define (or->if exp)
  (expand-or-clauses (cdr exp)))
(define (expand-or-clauses clauses)
  (if (null? clauses)
      'false
      (make-if (car clauses)
               'true
               (expand-or-clauses (cdr clauses)))))
(define (expand-clauses clauses)
  (if (null? clauses)
      'false
      (let ((first (car clauses))
            (rest (cdr clauses)))
        (if (cond-else-clause? first)
            (if (null? rest)
                (sequence->exp (cond-actions first))
                (error "ELSE clause isn't last -- COND->IF"
                       clauses))
            (if (eq? (cadr first) '=>)
                (cons (make-lambda
                       '(x)
                       (list (make-if 'x
                                  (list (caddr first) 'x)
                                  (expand-clauses rest))))
                      (list (cond-predicate first)))
                (make-if (cond-predicate first)
                         (sequence->exp (cond-actions first))
                         (expand-clauses rest)))))))
;4.6
(define (let? exp)
  (tagged-list? exp 'let))
(define (let->combination exp)
  (cons
   (make-lambda
    (map car (cadr exp))
    (cddr exp))
   (map cadr (cadr exp))))
;4.7
(define (let*? exp)
  (tagged-list? exp 'let*))
(define (make-let bindings body)
  (cons 'let (cons bindings body)))
(define (let*->nested-lets exp)
  (define (rec bindings)
    (cond ((null? bindings) (cddr exp))
          ((last-exp? bindings)
           (make-let (list (car bindings))
                     (cddr exp)))
          (else (make-let
                 (list (car bindings))
                 (list (rec (cdr bindings)))))))
  (rec (cadr exp)))
;4.8
;;the example can be transformed into the following form:
;; (define (fib n)
;;   (let ((a 1)
;;         (b 0)
;;         (count n))
;;       (define (fib-iter a b count)
;;         (if (= count 0)
;;             b
;;             (fib-iter (+ a b) a (- count 1))))
;;       (fib-iter a b count)))
(define (make-definition head body)
  (cons 'define (cons head body)))
(define (let->combination-2 exp)
  (if (pair? (cadr exp))
      (cons
       (make-lambda
        (map car (cadr exp))
        (cddr exp))
       (map cadr (cadr exp)))
      (let* ((vars (map car (caddr exp)))
             (proc (cadr exp))
             (head (cons proc vars))
             (body (cdddr exp)))
        (make-let
         (caddr exp)
         (list
          (make-definition head body)
          head)))))
;4.1.3
(define (false? x)
  (eq? x false))
(define (true? x)
  (not (eq? x false)))
(define (append x y)
    (if (null? x) y (cons (car x) (append (cdr x) y))))
(define (scan-out-defines body)
  (let* ((definitions
           (filter (lambda (x)
                     (and (pair? x) (eq? (car x) 'define))) body))
         (non-definitions
          (filter (lambda (x)
                    (or (not (pair? x))
                        (not (eq? (car x) 'define)))) body))
         (let-vars (map definition-variable definitions))
         (let-vals (map definition-value definitions))
         (let-bindings
          (map (lambda (x) (list x ''*unassigned*)) let-vars))
         (assignments
          (map (lambda (x y) (list 'set! x y)) let-vars let-vals)))
    (if (null? let-bindings)
        body
        (list (make-let let-bindings (append assignments non-definitions))))))
(define (make-procedure parameters body env)
  ;4.16
  (list 'procedure parameters (scan-out-defines body) env))
(define (compound-procedure? p)
  (tagged-list? p 'procedure))
(define (procedure-parameters p)
  (cadr p))
(define (procedure-body p)
  (caddr p))
(define (procedure-environment p)
  (cadddr p))
(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())
(define (make-frame variables values)
  (cons variables values))
(define (frame-variables frame) (car frame))
(define (frame-values frame) (cdr frame))
(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons var (car frame)))
  (set-cdr! frame (cons val (cdr frame))))
(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
      (cons (make-frame vars vals) base-env)
      (if (< (length vars) (length vals))
          (error "Too many arguments supplied" vars vals)
          (error "Too few arguments supplied" vars vals))))
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             ;4.16a
             (if (eq? '*unassigned* (car vals))
                 (error "Unassigned variable" var)
                 (car vals)))
            (else
             (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))
(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (set-car! vals val))
            (else
             (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable -- SET!" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (env-loop env))
(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan vars vals)
      (cond ((null? vars)
             (add-binding-to-frame! var val frame))
            ((eq? var (car vars))
             (set-car! vals val))
            (else
             (scan (cdr vars) (cdr vals)))))
    (scan (frame-variables frame)
          (frame-values frame))))
;4.1.4
(define list-ref-definition
  '(define (list-ref items n)
     (if (= n 0)
         (car items)
         (list-ref (cdr items) (- n 1)))))
(define map-definition
  '(define (map proc items)
     (if (null? items)
         '()
         (cons (proc (car items))
               (map proc (cdr items))))))
(define scale-list-definition
  '(define (scale-list items factor)
     (map (lambda (x) (* x factor)) items)))
(define add-lists-definition
  '(define (add-lists list1 list2)
     (cond ((null? list1) list2)
           ((null? list2) list1)
           (else
            (cons (+ (car list1) (car list2))
                  (add-lists (cdr list1) (cdr list2)))))))
(define integral-definition
  '(define (integral integrand initial-value dt)
     (define int
       (cons initial-value
             (add-lists int
                        (scale-list integrand dt))))
     int))
(define (setup-environment)
  (let ((initial-env
         (extend-environment (primitive-procedure-names)
                             (primitive-procedure-objects)
                             the-empty-environment)))
    (define-variable! 'true true initial-env)
    (define-variable! 'false false initial-env)
    (eval list-ref-definition initial-env)
    (eval map-definition initial-env)
    (eval scale-list-definition initial-env)
    (eval add-lists-definition initial-env)
    (eval integral-definition initial-env)
    initial-env))
(define (primitive-procedure? proc)
  (tagged-list? proc 'primitive))
(define (primitive-implementation proc) (cadr proc))
(define primitive-procedures
  (list (list 'null? null?)
        (list '+ +)
        (list '- -)
        (list '* *)
        (list '/ /)
        (list '= =)
        (list '> >)
        (list '< <)
        (list 'display display)
        (list 'newline newline)))
(define (primitive-procedure-names)
  (map car primitive-procedures))
(define (primitive-procedure-objects)
  (map (lambda (proc) (list 'primitive (cadr proc)))
       primitive-procedures))
(define (apply-primitive-procedure proc args)
  (apply-in-underlying-scheme
   (primitive-implementation proc) args))
(define input-prompt ";;; L-Eval input:")
(define output-prompt ";;; L-Eval value")
(define (driver-loop)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (let ((output (actual-value input the-global-environment)))
      (announce-output output-prompt)
      (user-print output)))
  (driver-loop))
(define (prompt-for-input string)
  (newline) (newline) (display string) (newline))
(define (announce-output string)
  (newline) (display string) (newline))
(define the-global-environment
  (setup-environment))
;4.2.3
(define (promise-print promise)
  (if (thunk? promise)
      (list 'promise (thunk-exp promise))
      promise))
(define (user-print object)
  (cond ((compound-procedure? object)
         (display (list 'compound-procedure
                        (procedure-parameters object)
                        (procedure-body object)
                        '<procedure-env>)))
        ((pair? object) (display (pair-output object)))
        (else
         (display object))))
;4.20
(define (letrec? exp)
  (tagged-list? exp 'letrec))
(define (letrec->combination exp)
  (let* ((vars (map car (cadr exp)))
         (vals (map cadr (cadr exp)))
         (let-bindings
          (map (lambda (x) (list x ''*unassigned*)) vars))
         (assignments
          (map (lambda (x y) (list 'set! x y)) vars vals)))
    (make-let let-bindings (append assignments (cddr exp)))))
;4.34
(define (pair-output pair)
  (cond ((thunk? pair) 'promise)
        ((evaluated-thunk? pair) (pair-output (thunk-value pair)))
        (else
         (cons (pair-output (car pair))
               (pair-output (cdr pair))))))
